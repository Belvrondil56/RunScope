generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  age       Int?
  records   Record[]
  goals     Goal[]
  programs  Program[]
  feedbacks Feedback[]
  createdAt DateTime @default(now())
}

model Program {
  id        Int      @id @default(autoincrement())
  title     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  weeks     Week[]
  createdAt DateTime @default(now())
}

model Week {
  id        Int      @id @default(autoincrement())
  weekNumber Int
  program   Program  @relation(fields: [programId], references: [id])
  programId Int
  sessions  Session[]
  createdAt DateTime @default(now())

  @@unique([programId, weekNumber]) // Pour éviter les doublons dans un même programme
}

model Session {
  id         Int       @id @default(autoincrement())
  title      String
  duration   Int       // en minutes
  pace       String    // ex: "5'30/km"
  distance   Float     // en km
  week       Week      @relation(fields: [weekId], references: [id])
  weekId     Int
  feedbacks  Feedback[]
  createdAt  DateTime  @default(now())
}

model Feedback {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId Int
  comment   String?
  feeling   Int?
  createdAt DateTime @default(now())
}

model Goal {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String   // "10km", "VMA", etc.
  target    Float
  deadline  DateTime
  createdAt DateTime @default(now())
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  distance  Float    // km : 5, 10, semi, marathon
  time      Int      // en secondes
  date      DateTime
}